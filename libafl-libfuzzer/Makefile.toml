# Variables
[env]
FUZZER_NAME = 'fuzzer_libexif'
PROJECT_DIR = { script = ["pwd"] }
CARGO_TARGET_DIR = { value = "${PROJECT_DIR}/target", condition = { env_not_set = [
  "CARGO_TARGET_DIR",
] } }

### debuging = dev & debug
### release = release & release
PROFILE = { value = 'dev', condition = { env_not_set = ["PROFILE"] } }
PROFILE_DIR = { value = 'debug', condition = { env_not_set = [
  "PROFILE_DIR",
] } }


LIBAFL_CC = '${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cc'
LIBAFL_CXX = '${CARGO_TARGET_DIR}/${PROFILE}/libafl_cxx'
FUZZER = '${CARGO_TARGET_DIR}/${PROFILE_DIR}/${FUZZER_NAME}'



# get & extract libpng
[tasks.gettarget]
condition = { files_not_exist = ["./libexif"] }
script_runner = "@shell"
script = '''
wget https://github.com/libexif/libexif/archive/refs/tags/libexif-0_6_14-release.tar.gz
tar -xvf libexif-0_6_14-release.tar.gz
mv libexif-libexif-0_6_14-release libexif
'''

# Compilers
[tasks.cxx]
command = "cargo"
args = ["build", "--profile", "${PROFILE}"]

[tasks.cc]
command = "cargo"
args = ["build", "--profile", "${PROFILE}"]



# Library
[tasks.lib]
script_runner = "@shell"
script = '''
# apt install autopoint libtool gettext libpopt-dev
cd libexif
autoreconf -fi
./configure --enable-shared=no --prefix=`pwd`/install
make CC="${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cc" CXX="${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cxx"
make install
cd "${PROJECT_DIR}"
'''
dependencies = ["gettarget", "cxx", "cc"]


# Harness
[tasks.fuzzer]
command = "${CARGO_TARGET_DIR}/${PROFILE_DIR}/libafl_cc"
args = [
  "${PROJECT_DIR}/harness.c",
  "${PROJECT_DIR}/libexif/install/lib/libexif.a",
  "-I${PROJECT_DIR}/libexif/",
  "-I${PROJECT_DIR}/libexif/install",
  "-o",
  "${FUZZER_NAME}",
  "-lm",
  "-lz",
]
dependencies = ["lib", "cxx", "cc"]




# Run the fuzzer
[tasks.run]
script_runner = "@shell"
script = '''
./${FUZZER_NAME} &
sleep 0.2
./${FUZZER_NAME} 2>/dev/null
'''
dependencies = ["fuzzer"]




# Test
[tasks.test]
script_runner = "@shell"
script = '''
rm -rf libafl_unix_shmem_server || true
(timeout 31s ./${FUZZER_NAME} | tee fuzz_stdout.log 2>/dev/null || true) &
sleep 0.2
timeout 30s ./${FUZZER_NAME} >/dev/null 2>/dev/null || true
if grep -qa "corpus: 30" fuzz_stdout.log; then
    echo "Fuzzer is working"
else
    echo "Fuzzer does not generate any testcases or any crashes"
    exit 1
fi
'''
dependencies = ["fuzzer"]

# Clean up
[tasks.clean]
# Disable default `clean` definition
clear = true
script_runner = "@shell"
script = '''
rm -f ./${FUZZER_NAME}
make -C libexif clean
cargo clean
'''
